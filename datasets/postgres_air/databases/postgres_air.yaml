---
type: header
schema_version: '1'
...
---
schema: postgres_air
name: booking_leg
type: table
description: Each row in booking_leg represents an individual flight segment tied
  to a booking and flight.
columns:
- name: booking_leg_id
  description: Unique identifier for the booking leg record.
- name: booking_id
  description: Identifier of the overall booking that this leg belongs to.
- name: flight_id
  description: Identifier of the scheduled flight serving this leg.
- name: leg_num
  description: Sequential position of the leg within its booking itinerary.
- name: is_returning
  description: Indicates whether this leg is part of the return journey (true) or
    outbound (false).
- name: update_ts
  description: Timestamp of the most recent modification to this leg record.
...
---
schema: postgres_air
name: boarding_pass
type: table
description: boarding_pass stores issued boarding passes for passengers on specific
  booking legs.
columns:
- name: pass_id
  description: Unique identifier of the boarding pass.
- name: passenger_id
  description: Identifier of the passenger to whom the boarding pass is issued.
- name: booking_leg_id
  description: Identifier of the booking leg (flight segment) this boarding pass is
    for.
- name: seat
  description: Seat assignment printed on the boarding pass.
- name: boarding_time
  description: Scheduled boarding time for the passenger.
- name: precheck
  description: Flag indicating if the passenger qualifies for expedited security screening.
- name: update_ts
  description: Timestamp of the last update to the boarding pass record.
...
---
schema: postgres_air
name: passenger
type: table
description: passenger lists travelers associated with bookings and optionally with
  customer accounts.
columns:
- name: passenger_id
  description: Primary key identifying the passenger record.
- name: booking_id
  description: ID of the booking that this passenger belongs to.
- name: booking_ref
  description: Reference code for the booking, repeated for convenience.
- name: passenger_no
  description: Sequence number of the passenger within the booking.
- name: first_name
  description: "Passenger\u2019s given name."
- name: last_name
  description: "Passenger\u2019s family name."
- name: account_id
  description: "Optional link to the customer\u2019s frequent-flyer or user account."
- name: update_ts
  description: Timestamp of the last change to the passenger record.
- name: age
  description: "Passenger\u2019s age in years, if recorded."
...
---
schema: postgres_air
name: account
type: table
description: account holds login credentials and personal details for users and frequent-flyer
  members.
columns:
- name: account_id
  description: Primary key identifying the user account.
- name: login
  description: Unique login or email address for the account.
- name: first_name
  description: "Account holder\u2019s given name."
- name: last_name
  description: "Account holder\u2019s family name."
- name: frequent_flyer_id
  description: Optional link to a frequent flyer profile tied to this account.
- name: update_ts
  description: Timestamp when the account record was last updated.
...
---
schema: postgres_air
name: phone
type: table
description: phone stores phone numbers related to user accounts and their metadata.
columns:
- name: phone_id
  description: Primary key for the phone record.
- name: account_id
  description: Account to which this phone number belongs.
- name: phone
  description: ''
- name: phone_type
  description: ''
- name: primary_phone
  description: ''
- name: update_ts
  description: ''
...
---
schema: postgres_air
name: flight
type: table
description: Contains one record per flight scheduled or flown, detailing its identifiers,
  planned and actual times, airports, aircraft and current status.
columns:
- name: flight_id
  description: Unique surrogate key for each flight record.
- name: flight_no
  description: Airline flight number assigned to the service.
- name: scheduled_departure
  description: "Planned departure timestamp in the airport\u2019s time zone."
- name: scheduled_arrival
  description: "Planned arrival timestamp in the airport\u2019s time zone."
- name: departure_airport
  description: IATA 3-letter code of the airport the flight leaves from.
- name: arrival_airport
  description: IATA 3-letter code of the airport the flight lands at.
- name: status
  description: Current operational status of the flight (e.g., Scheduled, Delayed,
    Departed, Cancelled).
- name: aircraft_code
  description: 3-character code identifying the aircraft type used.
- name: actual_departure
  description: Timestamp when the flight actually departed, if known.
- name: actual_arrival
  description: Timestamp when the flight actually arrived, if known.
- name: update_ts
  description: Last time this flight record was updated.
...
---
schema: postgres_air
name: booking
type: table
description: Stores customer booking transactions including reference code, contact
  details, linked account, price and audit timestamp.
columns:
- name: booking_id
  description: Primary key that uniquely identifies a booking.
- name: booking_ref
  description: Human-facing alphanumeric booking reference code, unique per booking.
- name: booking_name
  description: Optional descriptive name or title given to the booking.
- name: account_id
  description: Identifier of the customer account making the booking.
- name: email
  description: Email address associated with the booking.
- name: phone
  description: Contact phone number for the booking.
- name: update_ts
  description: Timestamp when the booking record was last modified.
- name: price
  description: Total price charged for the booking in base currency.
...
---
schema: postgres_air
name: aircraft
type: table
description: Lists aircraft types operated, with performance metrics and a unique
  code.
columns:
- name: model
  description: Manufacturer and model name of the aircraft.
- name: range
  description: Maximum flight range of the aircraft in kilometers or nautical miles.
- name: class
  description: Internal numeric category or seating class grouping for the aircraft.
- name: velocity
  description: Typical cruise speed of the aircraft.
- name: code
  description: 3-character unique aircraft type code serving as the primary key.
...
---
schema: postgres_air
name: airport
type: table
description: Catalog of airports worldwide with codes, names, locations, time zones,
  region details and whether they handle international flights.
columns:
- name: airport_code
  description: Primary key 3-letter IATA airport code.
- name: airport_name
  description: Full name of the airport.
- name: city
  description: City served by the airport.
- name: airport_tz
  description: Time zone identifier for the airport location.
- name: continent
  description: Two-letter code of the continent where the airport lies.
- name: iso_country
  description: ISO country code of the airport's nation.
- name: iso_region
  description: ISO region or state code where the airport is located.
- name: intnl
  description: Boolean flag indicating if the airport handles international flights.
- name: update_ts
  description: Timestamp of the last update to the airport record.
...
---
schema: postgres_air
name: frequent_flyer
type: table
description: Holds member details for the frequent flyer loyalty program, including
  personal info, card, tier and points.
columns:
- name: frequent_flyer_id
  description: Surrogate primary key identifying each frequent flyer.
- name: first_name
  description: Member's given name.
- name: last_name
  description: Member's surname.
- name: title
  description: Personal title or honorific (e.g., Mr, Ms, Dr).
- name: card_num
  description: Unique frequent flyer card number.
- name: level
  description: Numeric tier level within the loyalty program.
- name: award_points
  description: Total loyalty points currently accumulated by the member.
- name: email
  description: Email address of the frequent flyer.
- name: phone
  description: Contact phone number of the member.
- name: update_ts
  description: Timestamp of the most recent update to the frequent flyer record.
...
---
type: sql_example
sql: SELECT COUNT(*) as total_aircraft FROM postgres_air.aircraft
description: Fleet size analysis - counting total number of aircraft in the airline's fleet for inventory management and capacity planning
...
---
type: sql_example
sql: SELECT airport_name FROM postgres_air.airport WHERE city ILIKE '%Tokyo%'
description: Airport location search - finding all airports within a specific city or metropolitan area for route planning and destination analysis
...
---
type: sql_example
sql: SELECT f.flight_no, f.scheduled_departure FROM postgres_air.flight f INNER JOIN postgres_air.airport a ON f.departure_airport = a.airport_code WHERE a.airport_code = 'JFK' AND f.scheduled_departure >= '2024-07-01' AND f.scheduled_departure < '2024-08-01'
description: Flight schedule analysis by airport and time period - tracking departures from specific airports within date ranges for operational planning
...
---
type: sql_example
sql: SELECT city, COUNT(*) as airport_count FROM postgres_air.airport GROUP BY city ORDER BY airport_count DESC LIMIT 10
description: Market presence analysis - identifying cities with the most airports to understand market coverage and competition density
...
---
type: sql_example
sql: SELECT EXTRACT(EPOCH FROM (f.scheduled_arrival - f.scheduled_departure))/3600 as duration_hours FROM postgres_air.flight f WHERE f.scheduled_departure IS NOT NULL AND f.scheduled_arrival IS NOT NULL
description: Flight duration calculation - determining actual flight times for schedule optimization, crew planning, and customer information
...
---
type: sql_example
sql: SELECT ff.first_name, ff.last_name, ff.award_points FROM postgres_air.frequent_flyer ff WHERE ff.level = 4 AND ff.award_points > 100000 ORDER BY ff.award_points DESC
description: High-value customer identification - finding elite frequent flyers with premium status for targeted marketing and VIP services
...
---
type: sql_example
sql: SELECT AVG(p.age) as avg_age FROM postgres_air.passenger p INNER JOIN postgres_air.booking_leg bl ON p.booking_id = bl.booking_id INNER JOIN postgres_air.flight f ON bl.flight_id = f.flight_id INNER JOIN postgres_air.airport dep ON f.departure_airport = dep.airport_code INNER JOIN postgres_air.airport arr ON f.arrival_airport = arr.airport_code WHERE dep.intnl = true OR arr.intnl = true
description: International passenger demographics - analyzing age characteristics of passengers on international flights for service customization and market research
...
---
type: sql_example
sql: SELECT f.departure_airport, f.arrival_airport, COUNT(*) as flight_count, RANK() OVER (ORDER BY COUNT(*) DESC) as route_rank FROM postgres_air.flight f WHERE f.scheduled_departure >= '2024-01-01' AND f.scheduled_departure < '2024-07-01' GROUP BY f.departure_airport, f.arrival_airport
description: Route popularity ranking - identifying the busiest flight routes to optimize scheduling, pricing, and resource allocation
...
---
type: sql_example
sql: SELECT CASE WHEN f.actual_departure > f.scheduled_departure THEN EXTRACT(EPOCH FROM (f.actual_departure - f.scheduled_departure))/60 ELSE 0 END as delay_minutes FROM postgres_air.flight f WHERE f.actual_departure IS NOT NULL
description: Flight delay measurement - calculating departure delays to monitor operational performance and identify improvement opportunities
...
---
type: sql_example
sql: SELECT continent, AVG(CASE WHEN f.actual_departure > f.scheduled_departure THEN EXTRACT(EPOCH FROM (f.actual_departure - f.scheduled_departure))/60 ELSE 0 END) as avg_delay_minutes FROM postgres_air.flight f INNER JOIN postgres_air.airport a ON f.departure_airport = a.airport_code WHERE f.actual_departure IS NOT NULL GROUP BY continent
description: Regional performance comparison - analyzing average flight delays by continent to identify geographic patterns in operational efficiency
...
---
type: sql_example
sql: SELECT p.first_name, p.last_name, COUNT(DISTINCT bl.flight_id) as flight_count FROM postgres_air.passenger p INNER JOIN postgres_air.booking_leg bl ON p.booking_id = bl.booking_id INNER JOIN postgres_air.flight f ON bl.flight_id = f.flight_id WHERE f.scheduled_departure >= '2024-01-01' AND f.scheduled_departure < '2024-07-01' GROUP BY p.passenger_id, p.first_name, p.last_name HAVING COUNT(DISTINCT bl.flight_id) > 10
description: Frequent traveler identification - finding passengers who fly frequently but may not be enrolled in loyalty programs for targeted recruitment
...
---
type: sql_example
sql: SELECT b.booking_id, COUNT(p.passenger_id) as passenger_count FROM postgres_air.booking b INNER JOIN postgres_air.passenger p ON b.booking_id = p.booking_id GROUP BY b.booking_id ORDER BY passenger_count DESC LIMIT 1
description: Group booking analysis - identifying the largest group reservations for understanding corporate travel patterns and event-driven demand
...
---
type: sql_example
sql: SELECT COUNT(*) FILTER (WHERE p.age < 12) * 100.0 / COUNT(*) as children_percentage FROM postgres_air.passenger p INNER JOIN postgres_air.booking_leg bl ON p.booking_id = bl.booking_id INNER JOIN postgres_air.flight f ON bl.flight_id = f.flight_id INNER JOIN postgres_air.airport dep ON f.departure_airport = dep.airport_code WHERE dep.intnl = true
description: Child passenger demographics - calculating percentage of children on international flights for family-friendly service planning and safety requirements
...
---
type: sql_example
sql: SELECT p1.first_name, p1.last_name, p2.first_name, p2.last_name FROM postgres_air.passenger p1 INNER JOIN postgres_air.passenger p2 ON p1.booking_id = p2.booking_id AND p1.passenger_id < p2.passenger_id WHERE p1.last_name = p2.last_name AND p1.first_name != p2.first_name
description: Family travel identification - detecting passengers with the same last name traveling together to understand family travel patterns and offer appropriate services
...
---
type: sql_example
sql: WITH flight_distances AS (SELECT f.flight_id, f.aircraft_code, EXTRACT(EPOCH FROM (f.scheduled_arrival - f.scheduled_departure))/3600 * a.velocity as distance_miles FROM postgres_air.flight f INNER JOIN postgres_air.aircraft a ON f.aircraft_code = a.code) SELECT aircraft_code, SUM(distance_miles) as total_distance FROM flight_distances GROUP BY aircraft_code ORDER BY total_distance DESC
description: Aircraft utilization tracking - measuring total miles flown by each aircraft type for maintenance scheduling, fuel efficiency analysis, and fleet optimization
...
---
type: sql_example
sql: WITH departure_counts AS (SELECT departure_airport, date_part('hour', scheduled_departure) AS departure_hour, count(*) AS flight_count FROM postgres_air.flight GROUP BY departure_airport, departure_hour), ranked_departures AS (SELECT departure_airport, departure_hour, flight_count, RANK() OVER (PARTITION BY departure_airport ORDER BY flight_count DESC) AS rnk FROM departure_counts) SELECT a.airport_code, a.airport_name, r.departure_hour, r.flight_count FROM ranked_departures r JOIN postgres_air.airport a ON r.departure_airport = a.airport_code WHERE a.intnl = true AND r.rnk = 1
description: Peak operational hours analysis - identifying busiest departure times at each airport for resource allocation, staffing optimization, and capacity management
...
---
type: sql_example
sql: SELECT COUNT(*) FILTER (WHERE dep.iso_country != arr.iso_country) * 100.0 / COUNT(*) as international_percentage FROM postgres_air.flight f JOIN postgres_air.airport dep ON f.departure_airport = dep.airport_code JOIN postgres_air.airport arr ON f.arrival_airport = arr.airport_code
description: Market segmentation analysis - calculating proportion of international versus domestic flights using aggregate filters for business strategy and regulatory compliance
...
---
type: sql_example
sql: SELECT passenger_id, first_name, last_name FROM postgres_air.passenger WHERE NOT EXISTS (SELECT 1 FROM postgres_air.boarding_pass WHERE boarding_pass.passenger_id = passenger.passenger_id)
description: Customer engagement analysis - identifying passengers who booked but never flew to understand booking abandonment and improve conversion rates
...
---
type: sql_example
sql: SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY age) AS median_age FROM (SELECT DISTINCT p.passenger_id, p.age FROM postgres_air.passenger p JOIN postgres_air.boarding_pass bp ON p.passenger_id = bp.passenger_id WHERE p.age IS NOT NULL) AS sub
description: Demographic statistics - calculating median passenger age using statistical functions for market research and service design decisions
...
---
type: sql_example
sql: WITH days AS (SELECT generate_series('2024-05-01'::date, '2024-05-31'::date, interval '1 day') AS day), daily_revenue AS (SELECT d.day, COALESCE(SUM(b.price),0) AS revenue FROM days d LEFT JOIN postgres_air.booking b ON date(b.update_ts) = d.day GROUP BY d.day) SELECT ROUND(AVG(revenue), 2) AS average_daily_revenue FROM daily_revenue
description: Revenue trend analysis - generating complete date series to calculate average daily revenue including zero-revenue days for accurate financial reporting
...
---
type: sql_example
sql: SELECT p1.passenger_id, p1.first_name, p1.last_name, p2.passenger_id, p2.first_name, p2.last_name FROM postgres_air.passenger p1 JOIN postgres_air.passenger p2 ON p1.booking_id = p2.booking_id AND p1.passenger_id < p2.passenger_id WHERE p1.last_name = p2.last_name
description: Family travel pattern analysis - detecting related passengers traveling together using self-joins to offer family packages and targeted marketing
...
---
type: sql_example
sql: SELECT AVG(EXTRACT(EPOCH FROM (f2.scheduled_departure - f1.scheduled_arrival))/60) AS avg_connection_time FROM postgres_air.booking_leg bl1 JOIN postgres_air.booking_leg bl2 ON bl1.booking_id = bl2.booking_id AND bl2.leg_num = bl1.leg_num + 1 JOIN postgres_air.flight f1 ON bl1.flight_id = f1.flight_id JOIN postgres_air.flight f2 ON bl2.flight_id = f2.flight_id WHERE f1.arrival_airport = f2.departure_airport
description: Connection time optimization - analyzing layover durations between connecting flights to improve schedule efficiency and passenger experience
...
---
type: sql_example
sql: SELECT COUNT(DISTINCT bp.passenger_id) AS total_passengers, COUNT(DISTINCT bp.passenger_id) FILTER (WHERE bp.precheck = true) AS precheck_passengers FROM postgres_air.boarding_pass bp JOIN postgres_air.booking_leg bl ON bp.booking_leg_id = bl.booking_leg_id JOIN postgres_air.flight f ON bl.flight_id = f.flight_id WHERE f.scheduled_departure >= '2024-01-01'
description: Security processing efficiency - measuring precheck adoption rates to optimize airport security operations and passenger flow management
...
---
type: sql_example
sql: WITH monthly_travelers AS (SELECT p.passenger_id, date_trunc('month', f.scheduled_departure) AS travel_month, CASE WHEN dep.iso_country = arr.iso_country THEN 'domestic' ELSE 'international' END AS flight_type FROM postgres_air.passenger p JOIN postgres_air.boarding_pass bp ON p.passenger_id = bp.passenger_id JOIN postgres_air.booking_leg bl ON bp.booking_leg_id = bl.booking_leg_id JOIN postgres_air.flight f ON bl.flight_id = f.flight_id JOIN postgres_air.airport dep ON f.departure_airport = dep.airport_code JOIN postgres_air.airport arr ON f.arrival_airport = arr.airport_code) SELECT passenger_id, travel_month FROM monthly_travelers GROUP BY passenger_id, travel_month HAVING COUNT(DISTINCT flight_type) > 1
description: Travel behavior segmentation - identifying passengers who use both domestic and international services within the same period for cross-selling opportunities
...
