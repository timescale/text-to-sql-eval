---
type: header
schema_version: '1'
...
---
schema: public
name: badges
type: table
description: Stores each badge awarded to a user, including the badge name and the
  date it was granted.
columns:
- name: id
  description: Unique identifier for the badge record.
- name: userid
  description: Identifier of the user who received the badge.
- name: name
  description: Text label of the badge awarded.
- name: date
  description: Timestamp when the badge was granted.
...
---
schema: public
name: comments
type: table
description: Holds comments made on posts, along with scores, authorship and timing
  information.
columns:
- name: id
  description: Unique identifier for the comment.
- name: postid
  description: Identifier of the post the comment belongs to.
- name: score
  description: Net score (upvotes minus downvotes) of the comment.
- name: text
  description: Content of the comment.
- name: creationdate
  description: Timestamp when the comment was created.
- name: userid
  description: Identifier of the user who wrote the comment, if registered.
- name: userdisplayname
  description: Display name shown for the commenter when no user account is linked.
...
---
schema: public
name: postlinks
type: table
description: Links related posts together and categorizes the relationship type.
columns:
- name: id
  description: "Unique identifier for the post\u2013post link."
- name: creationdate
  description: Timestamp when the link between posts was created.
- name: postid
  description: Identifier of the source post in the link.
- name: relatedpostid
  description: Identifier of the target or related post.
- name: linktypeid
  description: Numeric code indicating the type of relationship (e.g., duplicate,
    related).
...
---
schema: public
name: tags
type: table
description: Defines each tag used on posts, including usage count and links to excerpt
  and wiki posts.
columns:
- name: id
  description: Unique identifier for the tag.
- name: tagname
  description: Text of the tag as shown on posts.
- name: count
  description: Number of times the tag has been applied to posts.
- name: excerptpostid
  description: Identifier of the post containing the tag's excerpt description, if
    any.
- name: wikipostid
  description: Identifier of the community-editable wiki post for the tag.
...
---
schema: public
name: users
type: table
description: Stores user profiles and activity statistics for all registered accounts.
columns:
- name: id
  description: Unique identifier for the user.
- name: reputation
  description: Current reputation score of the user.
- name: creationdate
  description: Timestamp when the user account was created.
- name: displayname
  description: Public display name chosen by the user.
- name: lastaccessdate
  description: Most recent timestamp when the user accessed the site.
- name: websiteurl
  description: Personal or professional website URL provided by the user.
- name: location
  description: Free-form text of the user's reported location.
- name: aboutme
  description: Markdown/HTML biography entered by the user.
- name: views
  description: Number of times the user's profile has been viewed.
- name: upvotes
  description: Total upvotes the user has given to others.
- name: downvotes
  description: Total downvotes the user has cast.
- name: accountid
  description: Identifier linking to the network-wide account, if applicable.
- name: age
  description: Age in years provided by the user, if any.
- name: profileimageurl
  description: URL of the user's avatar image.
...
---
schema: public
name: posthistory
type: table
description: Records each revision made to a post, storing the content snapshot, edit
  metadata and the user who performed the change.
columns:
- name: id
  description: Unique identifier for the post history record.
- name: posthistorytypeid
  description: Code indicating the type of revision event (e.g., initial body, title
    change, tag edit).
- name: postid
  description: Identifier of the post whose history this record belongs to.
- name: revisionguid
  description: Globally-unique identifier grouping all changes that occurred in a
    single revision action.
- name: creationdate
  description: Timestamp when this particular history entry was created.
- name: userid
  description: User who made the edit, referencing the users table.
- name: text
  description: Body text captured for the post at this revision step (may be title,
    tags or body depending on type).
- name: comment
  description: Optional edit comment supplied by the user describing the change.
- name: userdisplayname
  description: Display name of the editor when the user no longer exists or was unregistered.
...
---
schema: public
name: posts
type: table
description: Stores all questions and answers posted on the site along with metadata
  such as scores, dates, owners and counts.
columns:
- name: id
  description: Unique identifier for each post.
- name: posttypeid
  description: Indicates whether the post is a question, answer, etc.
- name: acceptedanswerid
  description: For questions, the id of the post that has been marked as the accepted
    answer.
- name: creaiondate
  description: Timestamp when the post was originally created.
- name: score
  description: Current score of the post (upvotes minus downvotes).
- name: viewcount
  description: Number of times the post has been viewed.
- name: body
  description: HTML-formatted body content of the post.
- name: owneruserid
  description: User who originally created the post.
- name: lasactivitydate
  description: Timestamp of the most recent activity (edit, comment, vote) on the
    post.
- name: title
  description: Title of the post (questions only).
- name: tags
  description: Concatenated list of tags applied to the post, each wrapped in angle
    brackets.
- name: answercount
  description: Number of answers the question currently has.
- name: commentcount
  description: Number of comments on the post.
- name: favoritecount
  description: How many users have marked this post as a favorite.
- name: lasteditoruserid
  description: User who last edited the post, if any.
- name: lasteditdate
  description: Timestamp of the most recent edit to the post.
- name: communityowneddate
  description: Date when the post became community-owned, if applicable.
- name: parentid
  description: For answers and comments converted to posts, the id of the parent question.
- name: closeddate
  description: Date the question was closed, if it has been closed.
- name: ownerdisplayname
  description: Display name of the original poster when the user record is unavailable.
- name: lasteditordisplayname
  description: Display name of the last editor when the user record is unavailable.
...
---
schema: public
name: votes
type: table
description: Logs every vote cast on posts, including type, date, voter and optional
  bounty amount.
columns:
- name: id
  description: Unique identifier for the vote.
- name: postid
  description: Post that received the vote.
- name: votetypeid
  description: Code describing the kind of vote (upvote, downvote, accept, bounty,
    etc.).
- name: creationdate
  description: Date the vote was applied.
- name: userid
  description: User who cast the vote, if recorded.
- name: bountyamount
  description: Point value of a bounty associated with the vote, if the vote represents
    a bounty award.
...
---
type: fact
description: Join posts with users using posts.OwnerUserId = users.Id to get owner DisplayName
...
---
type: fact
description: DisplayName is stored in users table, not in posts.ownerdisplayname field. The posts.ownerdisplayname field may be empty or outdated. Always JOIN posts with users using posts.owneruserid = users.id to get the current displayname.
...
---
type: fact
description: Use TO_CHAR(CAST(field AS TIMESTAMP), 'YYYY') for extracting year from date fields. For simple date comparisons, use DATE(field) > 'YYYY-MM-DD' format. Always cast date fields to proper types before comparison.
...
---
type: fact
description: Use CAST(expression AS REAL) and NULLIF for percentage calculations to avoid division by zero
...
---
type: fact
description: Join badges with users using badges.userid = users.id for user badge information
...
---
type: fact
description: Join postHistory with posts using postHistory.PostId = posts.Id for post revision data
...
---
type: fact
description: Join votes with posts using votes.PostId = posts.Id for voting information
...
---
type: fact
description: Join comments with users using comments.UserId = users.Id for commenter information
...
---
type: fact
description: Use COUNT DISTINCT when counting unique users to avoid duplicates
...
---
type: fact
description: LastAccessDate is a date field requiring proper date comparison operators
...
---
type: fact
description: Posts with tags use Tags field which contains comma-separated tag names
...
---
type: fact
description: For post ownership queries, always join posts with users table on OwnerUserId. Never use posts.ownerdisplayname directly - it may be NULL or outdated. The authoritative source for user display names is users.displayname.
...
---
type: fact
description: BountyAmount is found in votes table, not posts table
...
---
type: fact
description: Use WHERE field = (SELECT MAX/MIN(field)) pattern for finding maximum/minimum values
...
---
type: sql_example
sql: "SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Title = 'Eliciting priors from experts'"
description: Get post owner by title
...
---
type: sql_example
sql: "SELECT COUNT(*) FROM users WHERE TO_CHAR(CAST(LastAccessDate AS TIMESTAMP), 'YYYY') > '2014'"
description: Count users by year comparison
...
---
type: sql_example
sql: "SELECT COUNT(p.Id) FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.DisplayName = 'Tiago Pasqualini'"
description: Count posts by user display name
...
---
type: sql_example
sql: "SELECT CAST(COUNT(DISTINCT v.UserId) AS REAL) * 100 / NULLIF(COUNT(DISTINCT p.Id), 0) FROM posts p LEFT JOIN votes v ON p.Id = v.PostId WHERE v.BountyAmount = 50"
description: Calculate percentage with bounty votes
...
---
type: sql_example
sql: "SELECT UserId FROM badges GROUP BY UserId HAVING COUNT(Name) > 5"
description: Get users with more than 5 badges
...
---
type: sql_example
sql: "SELECT u.DisplayName FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.Text = 'thank you user93!'"
description: Get user who made specific comment
...
---
type: sql_example
sql: "SELECT p.Id FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'slashnick' ORDER BY p.AnswerCount DESC LIMIT 1"
description: Get post with most answers by user
...
---
type: sql_example
sql: "SELECT p.Tags FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Mark Meckes' AND p.CommentCount = 0"
description: Get tags for posts without comments by user
...
---
type: sql_example
sql: "SELECT p.Id, p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky' ORDER BY p.ViewCount DESC LIMIT 1"
description: Get most viewed post by user
...
---
type: sql_example
sql: "SELECT CAST(COUNT(pl.Id) AS REAL) / NULLIF(12, 0) FROM postLinks pl JOIN posts p ON pl.PostId = p.Id WHERE p.AnswerCount <= 2 AND TO_CHAR(CAST(pl.CreationDate AS TIMESTAMP), 'YYYY') = '2010'"
description: Calculate average monthly links for posts with few answers
...
---
type: sql_example
sql: "SELECT CAST(SUM(CASE WHEN TO_CHAR(CAST(b.Date AS TIMESTAMP), 'YYYY') = '2010' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(b.Id), 0) - CAST(SUM(CASE WHEN TO_CHAR(CAST(b.Date AS TIMESTAMP), 'YYYY') = '2011' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(b.Id), 0) FROM badges b WHERE b.Name = 'Student'"
description: Calculate percentage difference between years for specific badge. For percentage difference calculations, use subtraction of individual year percentages, not ratios.
...
---
type: sql_example
sql: |
  SELECT COUNT(subquery.userid) 
  FROM (SELECT userid FROM badges GROUP BY userid HAVING COUNT(name) > 5) AS subquery
description: Count users with more than X badges using subquery pattern. Use subquery with GROUP BY and HAVING, then COUNT the outer results.
...
---
type: sql_example
sql: |
  SELECT CAST(COUNT(votes.id) AS REAL) / NULLIF(COUNT(posts.id), 0) 
  FROM votes JOIN posts ON votes.userid = posts.owneruserid 
  WHERE posts.owneruserid = user_id
description: Calculate ratios between user activities. Pay attention to which entity is numerator vs denominator based on question wording.
...
---
type: fact
description: |
  When questions ask for exact text matches, pay attention to punctuation like exclamation marks. "thank you user93!" is different from "thank you user93".
...
---
type: fact
description: |
  For average monthly calculations, use CAST(COUNT(*) AS REAL) / 12, not AVG() of monthly groups. The question typically wants total count divided by 12 months.
...
