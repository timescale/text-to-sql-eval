---
type: header
schema_version: '1'
...
---
schema: public
name: badges
type: table
description: Stores each badge awarded to a user, including the badge name and the
  date it was granted.
columns:
- name: id
  description: Unique identifier for the badge record.
- name: userid
  description: Identifier of the user who received the badge.
- name: name
  description: Text label of the badge awarded.
- name: date
  description: Timestamp when the badge was granted.
...
---
schema: public
name: comments
type: table
description: Holds comments made on posts, along with scores, authorship and timing
  information.
columns:
- name: id
  description: Unique identifier for the comment.
- name: postid
  description: Identifier of the post the comment belongs to.
- name: score
  description: Net score (upvotes minus downvotes) of the comment.
- name: text
  description: Content of the comment.
- name: creationdate
  description: Timestamp when the comment was created.
- name: userid
  description: Identifier of the user who wrote the comment, if registered.
- name: userdisplayname
  description: Display name shown for the commenter when no user account is linked.
...
---
schema: public
name: postlinks
type: table
description: Links related posts together and categorizes the relationship type.
columns:
- name: id
  description: "Unique identifier for the post\u2013post link."
- name: creationdate
  description: Timestamp when the link between posts was created.
- name: postid
  description: Identifier of the source post in the link.
- name: relatedpostid
  description: Identifier of the target or related post.
- name: linktypeid
  description: Numeric code indicating the type of relationship (e.g., duplicate,
    related).
...
---
schema: public
name: tags
type: table
description: Defines each tag used on posts, including usage count and links to excerpt
  and wiki posts.
columns:
- name: id
  description: Unique identifier for the tag.
- name: tagname
  description: Text of the tag as shown on posts.
- name: count
  description: Number of times the tag has been applied to posts.
- name: excerptpostid
  description: Identifier of the post containing the tag's excerpt description, if
    any.
- name: wikipostid
  description: Identifier of the community-editable wiki post for the tag.
...
---
schema: public
name: users
type: table
description: Stores user profiles and activity statistics for all registered accounts.
columns:
- name: id
  description: Unique identifier for the user.
- name: reputation
  description: Current reputation score of the user.
- name: creationdate
  description: Timestamp when the user account was created.
- name: displayname
  description: Public display name chosen by the user.
- name: lastaccessdate
  description: Most recent timestamp when the user accessed the site.
- name: websiteurl
  description: Personal or professional website URL provided by the user.
- name: location
  description: Free-form text of the user's reported location.
- name: aboutme
  description: Markdown/HTML biography entered by the user.
- name: views
  description: Number of times the user's profile has been viewed.
- name: upvotes
  description: Total upvotes the user has given to others.
- name: downvotes
  description: Total downvotes the user has cast.
- name: accountid
  description: Identifier linking to the network-wide account, if applicable.
- name: age
  description: Age in years provided by the user, if any.
- name: profileimageurl
  description: URL of the user's avatar image.
...
---
schema: public
name: posthistory
type: table
description: Records each revision made to a post, storing the content snapshot, edit
  metadata and the user who performed the change.
columns:
- name: id
  description: Unique identifier for the post history record.
- name: posthistorytypeid
  description: Code indicating the type of revision event (e.g., initial body, title
    change, tag edit).
- name: postid
  description: Identifier of the post whose history this record belongs to.
- name: revisionguid
  description: Globally-unique identifier grouping all changes that occurred in a
    single revision action.
- name: creationdate
  description: Timestamp when this particular history entry was created.
- name: userid
  description: User who made the edit, referencing the users table.
- name: text
  description: Body text captured for the post at this revision step (may be title,
    tags or body depending on type).
- name: comment
  description: Optional edit comment supplied by the user describing the change.
- name: userdisplayname
  description: Display name of the editor when the user no longer exists or was unregistered.
...
---
schema: public
name: posts
type: table
description: Stores all questions and answers posted on the site along with metadata
  such as scores, dates, owners and counts.
columns:
- name: id
  description: Unique identifier for each post.
- name: posttypeid
  description: Indicates whether the post is a question, answer, etc.
- name: acceptedanswerid
  description: For questions, the id of the post that has been marked as the accepted
    answer.
- name: creaiondate
  description: Timestamp when the post was originally created.
- name: score
  description: Current score of the post (upvotes minus downvotes).
- name: viewcount
  description: Number of times the post has been viewed.
- name: body
  description: HTML-formatted body content of the post.
- name: owneruserid
  description: User who originally created the post.
- name: lasactivitydate
  description: Timestamp of the most recent activity (edit, comment, vote) on the
    post.
- name: title
  description: Title of the post (questions only).
- name: tags
  description: Concatenated list of tags applied to the post, each wrapped in angle
    brackets.
- name: answercount
  description: Number of answers the question currently has.
- name: commentcount
  description: Number of comments on the post.
- name: favoritecount
  description: How many users have marked this post as a favorite.
- name: lasteditoruserid
  description: User who last edited the post, if any.
- name: lasteditdate
  description: Timestamp of the most recent edit to the post.
- name: communityowneddate
  description: Date when the post became community-owned, if applicable.
- name: parentid
  description: For answers and comments converted to posts, the id of the parent question.
- name: closeddate
  description: Date the question was closed, if it has been closed.
- name: ownerdisplayname
  description: Display name of the original poster when the user record is unavailable.
- name: lasteditordisplayname
  description: Display name of the last editor when the user record is unavailable.
...
---
schema: public
name: votes
type: table
description: Logs every vote cast on posts, including type, date, voter and optional
  bounty amount.
columns:
- name: id
  description: Unique identifier for the vote.
- name: postid
  description: Post that received the vote.
- name: votetypeid
  description: Code describing the kind of vote (upvote, downvote, accept, bounty,
    etc.).
- name: creationdate
  description: Date the vote was applied.
- name: userid
  description: User who cast the vote, if recorded.
- name: bountyamount
  description: Point value of a bounty associated with the vote, if the vote represents
    a bounty award.
...
---
type: sql_example
sql: SELECT DisplayName, Reputation FROM users WHERE Reputation = (SELECT MAX(Reputation)
  FROM users);
description: This query finds the user(s) with the highest reputation score by using
  a subquery to select the maximum reputation and filtering the users table for this
  value. It demonstrates aggregation with MAX and filtering with a correlated subquery.
...
---
type: sql_example
sql: SELECT DisplayName, COUNT(*) AS PostCount FROM users INNER JOIN posts ON users.Id
  = posts.OwnerUserId GROUP BY users.Id, users.DisplayName HAVING COUNT(*) > 10;
description: This query lists each user who has authored more than 10 posts. It joins
  the users and posts tables, groups by user, and filters with the HAVING clause.
...
---
type: sql_example
sql: SELECT AVG(p.Score) AS AvgScore FROM posts p INNER JOIN users u ON p.OwnerUserId
  = u.Id WHERE u.Age > 65;
description: This example calculates the average post score for posts owned by users
  older than 65, demonstrating a join and the use of the AVG aggregate function with
  a WHERE condition referring to joined table columns.
...
---
type: sql_example
sql: SELECT b.Name, COUNT(*) AS AwardedCount FROM badges b WHERE TO_CHAR(CAST(b.Date
  AS TIMESTAMP), 'YYYY') = '2011' GROUP BY b.Name ORDER BY AwardedCount DESC;
description: This query counts how many times each badge was awarded in 2011. It features
  date extraction and formatting, aggregation, grouping, and ordering.
...
---
type: sql_example
sql: SELECT p.Title, p.ViewCount, u.DisplayName FROM posts p INNER JOIN users u ON
  p.OwnerUserId = u.Id WHERE p.ViewCount = (SELECT MAX(ViewCount) FROM posts);
description: This retrieves the most-viewed post, its title, view count, and the author,
  combining join logic and MAX aggregation as a filter (often for leaderboard or 'top-N'
  type questions).
...
---
type: sql_example
sql: SELECT t.TagName, COUNT(DISTINCT p.Id) AS PostCount FROM posts p, unnest(string_to_array(replace(p.Tags,
  '><', ','), ',')) AS tag JOIN tags t ON ltrim(rtrim(tag, '>'), '<') = t.TagName
  GROUP BY t.TagName ORDER BY PostCount DESC LIMIT 10;
description: This query counts posts per tag by extracting each individual tag from
  the Posts table's 'Tags' field (which is a concatenated string), joining to the
  Tags table, and using GROUP BY and ordering. It demonstrates advanced string manipulation
  and row-wise expansion.
...
---
type: sql_example
sql: SELECT c.Text, u.DisplayName FROM comments c INNER JOIN users u ON c.UserId =
  u.Id WHERE c.Score = (SELECT MAX(Score) FROM comments);
description: This retrieves the text and author display name of the highest-scored
  comment, demonstrating scalar subqueries in WHERE and multi-table join logic.
...
---
type: sql_example
sql: SELECT t.TagName, COUNT(*) FROM tags t INNER JOIN posts p ON t.ExcerptPostId
  = p.Id WHERE p.Score > 10 GROUP BY t.TagName;
description: This computes how many high-scored posts (score > 10) serve as excerpts
  for tags, leveraging a join, a condition on the joined table, and GROUP BY.
...
---
type: sql_example
sql: SELECT COUNT(*) FROM (SELECT u.Id FROM users u INNER JOIN badges b ON u.Id =
  b.UserId WHERE b.Name = 'Student' GROUP BY u.Id HAVING COUNT(*) > 2) AS sub;
description: This query finds the number of users who have received more than two
  'Student' badges, using grouping, having, and subqueries.
...
---
type: sql_example
sql: SELECT p.Title, COUNT(c.Id) AS CommentCount FROM posts p LEFT JOIN comments c
  ON p.Id = c.PostId WHERE p.CreaionDate >= '2020-01-01' GROUP BY p.Title;
description: This gives the count of comments for every post created since 2020-01-01,
  whether or not a post has comments, by using a LEFT JOIN and GROUP BY. It demonstrates
  inclusive joins for situations where 'no comments' is a relevant outcome.
...
